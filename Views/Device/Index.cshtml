@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<style>
    .download-btn {
        position: relative;
        overflow: hidden;
    }
    .download-btn .progress-overlay {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0%;
        background: rgba(0, 200, 0, 0.2); /* semi-transparent green */
        pointer-events: none;
        transition: width 0.2s ease;
    }
</style>
<div class="row g-4 justify-content-center w-100">

    <!-- Device Actions Card -->
    <div class="col-12 col-md-10">
        <div class="card shadow h-100 text-center">
            <div class="card-header bg-primary text-white fw-bold">Device Actions</div>
            <div class="card-body">

                <!-- Device Select -->
                <div class="row mb-3 align-items-center justify-content-center">
                    <label for="deviceSelect" class="col-auto col-form-label fw-semibold">Select Device:</label>
                    <div class="col-auto">
                        <select id="deviceSelect" class="form-select">
                            <option selected disabled value="">-- Loading Devices --</option>
                        </select>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex flex-wrap gap-3 justify-content-center mb-4">
                    <button class="btn btn-outline-primary" id="btnGetFiles" disabled>
                        <i class="bi bi-folder-symlink"></i> Retrieve Files
                    </button>
                    <button class="btn btn-outline-secondary" id="btnGetStatus" disabled>
                        <i class="bi bi-info-circle"></i> Get Status
                    </button>
                    <button class="btn btn-outline-danger" id="btnDeleteAll" disabled>
                        <i class="bi bi-trash"></i> Delete All Files
                    </button>
                </div>

                <!-- Device Status Card -->
                <div class="card shadow-lg  border-0 my-3 p-3">
                    <div class="card-body text-start">
                        <p><strong>Status:</strong> <span id="deviceStatus"
                                class="badge bg-secondary">Disconnected</span></p>
                        <p><strong>Uptime:</strong> <span id="deviceUptime">-</span></p>
                        <p><strong>Heap:</strong> <span id="deviceHeap">-</span></p>
                        <p><strong>WiFi RSSI:</strong> <span id="deviceRssi">-</span></p>
                        <p><strong>WiFi IP:</strong> <span id="deviceIp">-</span></p>
                        <div class="d-flex gap-2 mt-2">
                            <button class="btn btn-outline-warning" id="btnDisconnect">
                                <i class="bi bi-plug"></i> Disconnect
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- Files Table -->
    <div class="col-12 col-md-10">
        <div class="card shadow h-100 text-center">
            <div class="card-header bg-dark text-white fw-bold">Files</div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover table-striped table-bordered align-middle text-center">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>File Name</th>
                                <th>Size</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="filesTable"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script>
        const deviceSelect = document.getElementById("deviceSelect");
        const btnGetFiles = document.getElementById("btnGetFiles");
        const btnGetStatus = document.getElementById("btnGetStatus");
        const btnDeleteAll = document.getElementById("btnDeleteAll");
        const deviceStatus = document.getElementById("deviceStatus");
        const deviceUptime = document.getElementById("deviceUptime");
        const deviceHeap = document.getElementById("deviceHeap");
        const deviceRssi = document.getElementById("deviceRssi");
        const deviceIp = document.getElementById("deviceIp");
        const filesTable = document.getElementById("filesTable");

        let selectedDevice = null;
        let filesList = [];


       // const progressBar = document.getElementById("downloadProgress");
       //  const progressText = document.getElementById("progressText");

       //  connection.on("DownloadProgress", (deviceId, received, total) => {
       //      const percent = Math.floor((received / total) * 100);
       //      progressBar.value = percent;
       //      progressText.innerText = percent + "%";
       //  });


        async function loadDevices() {
            try {
                const res = await fetch("/Device/connected");
                const devices = await res.json();
                deviceSelect.innerHTML = `<option selected disabled value="">-- Choose Device --</option>`;
                devices.forEach(d => {
                    const option = document.createElement("option");
                    option.value = d.id;
                    option.innerText = d.id;
                    deviceSelect.appendChild(option);
                });
            } catch (err) {
                showToast(err.message, "error");
            }
        }

        loadDevices();

        deviceSelect.addEventListener("change", () => {
            selectedDevice = deviceSelect.value;
            btnGetFiles.disabled = !selectedDevice;
            btnGetStatus.disabled = !selectedDevice;
            btnDeleteAll.disabled = !selectedDevice;
            filesTable.innerHTML = "";
            updateLocalStatus();
        });

        function resetStatusFields() {
            deviceStatus.innerText = "Disconnected";
            deviceStatus.className = "badge bg-secondary";
            deviceUptime.innerText = "-";
            deviceHeap.innerText = "-";
            deviceRssi.innerText = "-";
            deviceIp.innerText = "-";
        }
        async function updateLocalStatus(){
             try {
                const res = await fetch(`/Device/localstatus/${selectedDevice}`);
                console.log("inside update local status")
                if (!res.ok) throw new Error(`Failed to fetch status: ${res.message}`);
                const status = await res.json();


                deviceStatus.innerText = status.connected ? "Online" : "Offline";
                deviceStatus.className = status.connected ? "badge bg-success" : "badge bg-secondary";
                deviceUptime.innerText = status.uptime || "-";
                deviceHeap.innerText = status.heap || "-";
                deviceRssi.innerText = status.wifi_Rssi || "-";
                deviceIp.innerText = status.wifi_Ip || "-";
                showToast("Device status updated", "success");
            } catch (err) {
                showToast(err.message, "error");
            }
        }
        async function updateStatus() {
            try {
                const res = await fetch(`/Device/status/${selectedDevice}`);
                console.log("inside update status")
                if (!res.ok) throw new Error(`Failed to fetch status: ${res.message}`);
                const status = await res.json();
                

                deviceStatus.innerText = status.connected ? "Online" : "Offline";
                deviceStatus.className = status.connected ? "badge bg-success" : "badge bg-secondary";
                deviceUptime.innerText = status.uptime || "-";
                deviceHeap.innerText = status.heap || "-";
                deviceRssi.innerText = status.wifi_Rssi || "-";
                deviceIp.innerText = status.wifi_Ip || "-";
                showToast("Device status updated", "success");
            } catch (err) {
                showToast(err.message, "error");
            }
        }

        async function getFiles() {
            try {
                const res = await fetch(`/Device/files/${selectedDevice}`);
                console.log("inside get files");
                if (!res.ok) throw new Error(`Failed to fetch files: ${res.message}`);
                filesList = await res.json();

                filesTable.innerHTML = "";
                filesList.forEach((f, i) => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `
                                                                <td>${i + 1}</td>
                                                                <td>${f.name}</td>
                                                                <td>${f.size}</td>
                                                                <td>
                                                                    <div class="d-flex gap-2 justify-content-center">
                                                                         <button class="btn btn-sm btn-outline-success download-btn" onclick="downloadFile('${f.name}')" data-filename="${f.name}">
                                                                            <i class="bi bi-download"></i> Download <span class="progress-overlay"></span>
                                                                        </button>
                                                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteFile('${f.name}', ${i})">
                                                                            <i class="bi bi-trash"></i> Delete 
                                                                        </button>
                                                                    </div>
                                                                </td>
                                                            `;
                    filesTable.appendChild(tr);
                });

                showToast("File list loaded", "success");
            } catch (err) {
                showToast(err.message, "error");
            }
        }

          async function downloadFile(fileName) {
            try {
                const res = await fetch(`/Device/Download?deviceId=${selectedDevice}&filename=${fileName}`);
                if (!res.ok) throw new Error(`Download failed: ${res.statusText}`);

                const total = +res.headers.get("Content-Length") || 0;
                let loaded = 0;

                const reader = res.body.getReader();
                const chunks = [];

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    chunks.push(value);
                    loaded += value.length;

                    if (total) {
                        const percent = Math.round((loaded / total) * 100);
                        updateDownloadProgress(fileName, percent); // <-- your UI update
                    }
                }

                const blob = new Blob(chunks);
                const link = document.createElement("a");
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                link.click();
                showToast(`Downloaded ${fileName}`, "success");

            } catch (err) {
                showToast(err.message, "error");
                 } finally {
            hideDownloadOverlay(); // <-- hide overlay when done--/>
        }
        }
                function showDownloadOverlay() {
            const overlay = document.getElementById("downloadOverlay");
            if (overlay) overlay.style.display = "block";
        }

        function hideDownloadOverlay() {
            const overlay = document.getElementById("downloadOverlay");
            if (overlay) overlay.style.display = "none";
        }

        function updateDownloadProgress(fileName, percent) {
            const btn = document.querySelector(`[data-filename="${fileName}"]`);
            const overlay = btn.querySelector(".progress-overlay");
            overlay.style.width = percent + "%";
        }


        async function deleteFile(fileName, index) {
            try {
                const res = await fetch(`/Device/files?deviceId=${selectedDevice}&fileName=${fileName}`, { method: "POST" });
                if (!res.ok) throw new Error(`Delete failed: ${res.message}`);
                filesList.splice(index, 1);
                getFiles();
                showToast(`Deleted ${fileName}`, "success");
            } catch (err) {
                showToast(err.message, "error");
            }
        }
        async function disconnectDevice(deviceId) {
            try {
                const res = await fetch(`/Device/disconnect?deviceId=${selectedDevice}`, { method: "POST" });
                
                if (!res.ok) throw new Error(`Errorr: ${res.message}`);
                @* filesList.splice(index, 1);
                getFiles(); *@
                loadDevices();
                resetStatusFields();
                showToast(`Disconnecting ${deviceId}`, "succeed");
            } catch (err) {
                showToast(err.message, "error");
            }
        }


        async function deleteAllFiles() {
            try {
                const res = await fetch(`/Device/DeleteAllFiles?deviceId=${selectedDevice}`, { method: "POST" });
                if (!res.ok) throw new Error(`Delete all failed: ${res.message}`);
                filesList = [];
                filesTable.innerHTML = "";
                showToast("All files deleted", "success");
            } catch (err) {
                showToast(err.message, "error");
            }
        }

        btnGetStatus.addEventListener("click", updateStatus);
        btnGetFiles.addEventListener("click", getFiles);
        btnDeleteAll.addEventListener("click", deleteAllFiles);

        document.getElementById("btnDisconnect").addEventListener("click", disconnectDevice);

         

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/downloadHub")
            .build();

        connection.on("ReceiveDownloadProgress", (deviceId, fileName, percent) => {
            // console.log(`Progress from ${deviceId}: ${percent}%`);
            const btn = document.querySelector(`button[data-filename='${fileName}']`);
            if(btn){

                btn.style.border = `3px solid #198754`;
                btn.style.background = `linear-gradient(to right, green ${percent}%, transparent ${percent}%)`;
                btn.textContent = `Downloading ${percent}%`;
                btn.style.color = "black";
                if(percent === 100){
                    btn.innerHTML = `<i class="bi bi-download"></i> Download`;
                    btn.style.border = "";
                    btn.style.background = "";
                    btn.style.color = "#198754";
                }
            }
        });

        connection.start();
    </script>
}